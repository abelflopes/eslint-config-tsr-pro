import type { Linter } from "eslint";
import { configBase } from "./config-base";

export const configTypescript = {
  files: ["**/*.ts*"],
  parser: "@typescript-eslint/parser",
  plugins: ["@typescript-eslint", "eslint-plugin-tsdoc"],
  extends: ["plugin:@typescript-eslint/recommended"],
  rules: {
    // TSDOC
    "tsdoc/syntax": "warn",
    // Typescript Eslint
    "@typescript-eslint/adjacent-overload-signatures": "error",
    "@typescript-eslint/array-type": ["warn", { default: "array-simple" }],
    "@typescript-eslint/consistent-generic-constructors": "warn",
    "@typescript-eslint/consistent-type-assertions": [2, { assertionStyle: "never" }],
    "@typescript-eslint/consistent-type-exports": [
      "warn",
      { fixMixedExportsWithInlineTypeSpecifier: true },
    ],
    "@typescript-eslint/consistent-type-imports": [
      "warn",
      {
        fixStyle: "inline-type-imports",
      },
    ],
    "default-param-last": "off",
    "@typescript-eslint/default-param-last": configBase.rules["default-param-last"],
    "dot-notation": "off",
    "@typescript-eslint/dot-notation": configBase.rules["dot-notation"],
    "@typescript-eslint/explicit-function-return-type": "warn",
    "@typescript-eslint/explicit-member-accessibility": "warn",
    "@typescript-eslint/explicit-module-boundary-types": "warn",
    "init-declarations": "off",
    "@typescript-eslint/init-declarations": configBase.rules["init-declarations"],
    "max-params": "off",
    "@typescript-eslint/max-params": configBase.rules["max-params"],
    "@typescript-eslint/no-array-delete": "error",
    "@typescript-eslint/no-confusing-non-null-assertion": "error",
    "@typescript-eslint/no-confusing-void-expression": "warn",
    "@typescript-eslint/no-dynamic-delete": "error",
    "no-empty-function": "off",
    "@typescript-eslint/no-empty-function": configBase.rules["no-empty-function"],
    "@typescript-eslint/no-empty-interface": "error",
    "@typescript-eslint/no-extraneous-class": "error",
    "@typescript-eslint/no-inferrable-types": "error",
    "no-loop-func": "off",
    "@typescript-eslint/no-loop-func": configBase.rules["no-loop-func"],
    "@typescript-eslint/no-meaningless-void-operator": "error",
    "@typescript-eslint/no-mixed-enums": "warn",
    "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
    "@typescript-eslint/no-non-null-assertion": "error",
    "no-throw-literal": "off",
    "@typescript-eslint/no-throw-literal": configBase.rules["no-throw-literal"],
    "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
    "@typescript-eslint/no-unnecessary-condition": "error",
    "@typescript-eslint/no-unnecessary-qualifier": "error",
    "@typescript-eslint/no-unnecessary-type-arguments": "warn",
    "@typescript-eslint/no-unsafe-unary-minus": "error",
    "no-unused-expressions": "off",
    "@typescript-eslint/no-unused-expressions": configBase.rules["no-unused-expressions"],
    "no-use-before-define": "off",
    "@typescript-eslint/no-use-before-define": configBase.rules["no-use-before-define"],
    "no-useless-constructor": "off",
    "@typescript-eslint/no-useless-constructor": configBase.rules["no-useless-constructor"],
    "@typescript-eslint/no-useless-empty-export": "error",
    "@typescript-eslint/no-useless-template-literals": "error",
    "@typescript-eslint/non-nullable-type-assertion-style": "warn",
    "prefer-destructuring": "off",
    "@typescript-eslint/prefer-destructuring": configBase.rules["prefer-destructuring"],
    "@typescript-eslint/prefer-enum-initializers": "error",
    "@typescript-eslint/prefer-function-type": "error",
    "@typescript-eslint/prefer-literal-enum-member": "error",
    "@typescript-eslint/prefer-optional-chain": "warn",
    "prefer-promise-reject-errors": "off",
    "@typescript-eslint/prefer-promise-reject-errors":
      configBase.rules["prefer-promise-reject-errors"],
    "@typescript-eslint/prefer-readonly": "warn",
    "@typescript-eslint/prefer-reduce-type-parameter": "error",
    "@typescript-eslint/prefer-string-starts-ends-with": "warn",
    "@typescript-eslint/promise-function-async": "error",
    "@typescript-eslint/require-array-sort-compare": "error",
    "@typescript-eslint/return-await": "warn",
    "@typescript-eslint/switch-exhaustiveness-check": "error",
    "@typescript-eslint/unified-signatures": "warn",
  },
} satisfies Linter.ConfigOverride;
